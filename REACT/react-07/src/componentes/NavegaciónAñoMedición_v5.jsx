// https://react-bootstrap.netlify.app/docs/components/modal/
// https://www.google.com/search?q=react+accessing+dom+elements+in+modals&rlz=1C1GCEU_esAR999AR999&oq=react+accesing+dom+elents+in+modal&gs_lcrp=EgZjaHJvbWUqCQgBECEYChigATIGCAAQRRg5MgkIARAhGAoYoAEyCQgCECEYChigAdIBCTIwMjE1ajBqN6gCALACAA&sourceid=chrome&ie=UTF-8
// https://stackblitz.com/edit/reactstrap-tnlqis?file=Example.js
// https://www.geeksforgeeks.org/how-to-pass-data-from-child-component-to-its-parent-in-reactjs/
// https://bobbyhadz.com/blog/react-pass-data-from-child-to-parent
// https://bobbyhadz.com/blog/react-pass-data-from-child-to-parent

import { StrictMode } from 'react';
import React, { useRef } from 'react'
import { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import Button from 'react-bootstrap/Button';
import Col from 'react-bootstrap/Col';
import Container from 'react-bootstrap/Container';
import Modal from 'react-bootstrap/Modal';
import Row from 'react-bootstrap/Row';
import { Bot√≥nA√±oAnterior } from './Bot√≥nA√±oAnterior';
import { Bot√≥nA√±oSiguiente } from './Bot√≥nA√±oSiguiente';


export const Navegaci√≥nA√±oMedici√≥n_v5 = (propiedades) => {

    const { navLinkA√±oMedicion } = propiedades;
    const longitudObjetoNavLinkA√±oMedicion = Object.keys(navLinkA√±oMedicion).length;
    let pointerToObjetoNavLinkA√±oMedicion = longitudObjetoNavLinkA√±oMedicion - 1; // la longitud menos uno

    const handleClose = () => setShow(false);
    const [isClicked, setIsClicked] = useState(false);
    const [show, setShow] = useState(false);

    // para manejar el click de la ventana modal
    const handleClicked = (navLinkA√±oMedicion) => {
        setIsClicked(true);
        setShow(true);
        console.log('handleClicked : ', navLinkA√±oMedicion);
    }

    let objetoCalendario = [{
        puntero : pointerToObjetoNavLinkA√±oMedicion,
        a√±o : (Object.values(navLinkA√±oMedicion).at(pointerToObjetoNavLinkA√±oMedicion)).id
    }];
    let a√±o = Object.values(Object.values(objetoCalendario)).at(0).a√±o;
   
    //console.log((Object.values(navLinkA√±oMedicion).at(pointerToObjetoNavLinkA√±oMedicion)).id);
    
    // para manejar el click del boton a√±o anterior
    const [coun_boton_a√±o_Anterior_longitudObjetoNavLinkA√±oMedicion, setMensajeDesdeBotonA√±oAnterior] = useState(longitudObjetoNavLinkA√±oMedicion); // coun_boton_a√±o_siguiente_longitudObjetoNavLinkA√±oMedicion es = longitudObjetoNavLinkA√±oMedicion
    const handleClickBotonA√±oAnterior = mensajeBotonA√±oAnterior => {
        // üëáÔ∏è take the parameter passed from the Child component
        setMensajeDesdeBotonA√±oAnterior(mensajeBotonA√±oAnterior);
        if ((mensajeBotonA√±oAnterior === 'BotonA√±oAnteriorPresionado') && (pointerToObjetoNavLinkA√±oMedicion > -1)) {
            pointerToObjetoNavLinkA√±oMedicion--;
            if (pointerToObjetoNavLinkA√±oMedicion < 0) pointerToObjetoNavLinkA√±oMedicion = 0;
            console.log('argumento desde Boton A√±o Anterior: ', mensajeBotonA√±oAnterior, ' ', 'coun_boton_a√±o_Anterior_longitudObjetoNavLinkA√±oMedicion ', coun_boton_a√±o_Anterior_longitudObjetoNavLinkA√±oMedicion, ' ', 'pointerToObjetoNavLinkA√±oMedicion ', pointerToObjetoNavLinkA√±oMedicion);
            objetoCalendario = [
                {
                    puntero : pointerToObjetoNavLinkA√±oMedicion,
                    a√±o : (Object.values(navLinkA√±oMedicion).at(pointerToObjetoNavLinkA√±oMedicion)).id
                }
            ]
            console.log('---> ' , Object.values(Object.values(objetoCalendario)).at(0).a√±o);
            a√±o = Object.values(Object.values(objetoCalendario)).at(0).a√±o;            
        }
    };

    // para manejar el click del boton a√±o siguiente
    const [coun_boton_a√±o_Siguiente_longitudObjetoNavLinkA√±oMedicion, setMensajeDesdeBotonA√±oSiguiente] = useState(longitudObjetoNavLinkA√±oMedicion); // coun_boton_a√±o_Siguiente_longitudObjetoNavLinkA√±oMedicion es = longitudObjetoNavLinkA√±oMedicion
    const handleClickBotonA√±oSiguiente = mensajeBotonA√±oSiguiente => {
        // üëáÔ∏è take the parameter passed from the Child component
        setMensajeDesdeBotonA√±oSiguiente(mensajeBotonA√±oSiguiente);
        if ((mensajeBotonA√±oSiguiente === 'BotonA√±oSiguientePresionado') && (pointerToObjetoNavLinkA√±oMedicion <= longitudObjetoNavLinkA√±oMedicion - 1)) {
            pointerToObjetoNavLinkA√±oMedicion++;
            if (pointerToObjetoNavLinkA√±oMedicion > longitudObjetoNavLinkA√±oMedicion - 1) pointerToObjetoNavLinkA√±oMedicion = longitudObjetoNavLinkA√±oMedicion - 1;
            console.log('argumento desde Boton A√±o Siguiente: ', mensajeBotonA√±oSiguiente, ' ', 'coun_boton_a√±o_Siguiente_longitudObjetoNavLinkA√±oMedicion ', coun_boton_a√±o_Siguiente_longitudObjetoNavLinkA√±oMedicion, ' ', 'pointerToObjetoNavLinkA√±oMedicion ', pointerToObjetoNavLinkA√±oMedicion);
            objetoCalendario = [
                {
                    puntero : pointerToObjetoNavLinkA√±oMedicion,
                    a√±o : (Object.values(navLinkA√±oMedicion).at(pointerToObjetoNavLinkA√±oMedicion)).id
                }
            ]
            console.log('---> ' , Object.values(Object.values(objetoCalendario)).at(0).a√±o);
            a√±o = Object.values(Object.values(objetoCalendario)).at(0).a√±o;
        }
    };

    console.log('---------------> ' , a√±o)

    

    return (


        <div className="">
            {
                <>
                    <StrictMode>
                        <div key={'div1'} className="" >
                            <button key={'div2'} id={'id1'} className="btn-primary btn d-inline-flex align-items-center rounded border-1 collapsed px-0 py-0" data-bs-toggle="collapse" data-bs-target="#" aria-expanded="true"
                                onClick={(event) => handleClicked(navLinkA√±oMedicion)}                            >
                                <a id="a√±oBoton" href="#" className="m-1 px-2 py-1  h4 link-body-emphasis d-inline-flex text-decoration-none rounded"><strong>{a√±o}</strong></a>
                            </button>
                        </div>

                        {isClicked && (
                            <div>

                                <Modal
                                    id="modalA√±oMes"
                                    size="sm"
                                    aria-labelledby="contained-modal-title-vcenter"
                                    centered="true"
                                    dialogClassName="modal-90w"
                                    show={show}

                                    onHide={handleClose}>
                                    <Modal.Header closeButton>
                                        <Modal.Title>ciclo lectivo y mes</Modal.Title>
                                    </Modal.Header>
                                    <Modal.Body>
                                        <div id="tarjeta-a√±o-meses" className="card border-primary bg-white">
                                            <div className="card-body px-3 py-1">
                                                <div className="barra-a√±o text-center p-0">

                                                    <Bot√≥nA√±oAnterior handleClickBotonA√±oAnterior={handleClickBotonA√±oAnterior} />

                                                    <div className="a√±o">

                                                        <h5 id="a√±o" className="card-title h2 link-body-emphasis d-inline-flex text-decoration-none rounded py-1">
                                                            <strong>{ coun_boton_a√±o_Anterior_longitudObjetoNavLinkA√±oMedicion }</strong>
                                                        </h5>

                                                    </div>

                                                    <Bot√≥nA√±oSiguiente handleClickBotonA√±oSiguiente={handleClickBotonA√±oSiguiente} />

                                                </div>

                                                <div className="border-top my-2 "></div>

                                                <div className="meses text-center p-0">

                                                </div>
                                            </div>
                                        </div>
                                    </Modal.Body>
                                    <Modal.Footer>
                                        <Button variant="primary" onClick={handleClose}>
                                            Aceptar
                                        </Button>
                                    </Modal.Footer>
                                </Modal >



                            </div>
                        )
                        }
                    </StrictMode>

                </>

            }
        </div >
    );

}
